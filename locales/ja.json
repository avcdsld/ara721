{
  "about": {
    "subTitle": "実験的アート･コレクション",
    "description": " ここは、スマートコントラクトを使った Ara の実験的なアート作品を説明するサイトです。"
  },
  "protein": {
    "subTitle": "― 複製, 波及, 限界",
    "workInfo": "NFT コントラクト, Solidity, 2022",
    "abstract": "「Protein」は、同一スマートコントラクト内の NFT 同士のつながりを意識して作られた NFT コントラクトです。NFT が新たに mint されると、コントラクト内の他の「すべての」NFT が影響を受けます。これはフィジカルな物質だと当たり前のことですが、2022 年時点のほとんどの NFT はこの性質を持っていません。この NFT コントラクトは、このような当たり前の性質をデジタルの物質に与えたものです。",
    "replication": "複製",
    "replicationDescription": "NFT は誰でも mint できます。そのとき、これまでに mint されたすべての NFT はひとつ前の所有者に送付されます。最初の minter が所有する NFT は、誰かが mint するたびに最新の ID を持つ NFT に置き換わっていきます。これは、タンパク質が新しいものに置き換わって、代謝が行われることに似ています。",
    "influence": "波及",
    "influenceDescription": "ある NFT が生まれると、他のすべての NFT が移動します。この世界では、誰かが何かをすると、他のすべてのものに何らかの影響を与えますが、これはデジタル空間においても同じはずです。この作品は、その最初期のシンプルな実施例です。",
    "limit": "限界",
    "limitDescription": "生き物はいつか死にます。代謝もいずれ終わります。DNA の複製は無限には行われません。それはこの NFT も同じです。新しい NFT を mint すると他のすべての NFT が送付されるため、NFT の数が増えれば増えるほどその処理量が大きくなります。そして、ある一定の数まで mint されると、Ethereum の Gas Limit に到達します。それが、この NFT の mint 上限になります。",
    "links": "リンク",
    "etherscanDescription": "もしあなたがこの NFT に価値を見出し、作品に参加することを望むなら、Etherscan にて safeMint() 関数を実行することで NFT を mint できます。引数にはあなたの ETH アドレスを入力してください。必要なのは Gas 代だけです。",
    "githubDescription": "もしあなたがこの NFT の詳細の仕組みを知りたいなら、GitHub でスマートコントラクトのソースコードや開発環境をみることができます。",
    "openseaDescription": "もしあなたがこの NFT の画像やメタデータをみたいなら、または、NFT を売買したいなら、OpenSea を使うことができます。ただしこの作品では NFT のビジュアルは重視されておらず、メタデータはコントラクトの管理者が変更可能であることに留意してください。"
  },
  "selfReplication": {
    "workInfo": "Cadence スマート･コントラクト, 2022",
    "abstract": "「Self-Replication（自己複製）」は、自分自身を複製することができるスマートコントラクトです。この作品は、直感的なコードの表現が可能な Cadence プログラミング言語を使って、Flow ブロックチェーン上にデプロイされています。",
    "codeExecution": "理想的なコードの記述/実行環境",
    "codeExecutionDescription": "ブロックチェーン上で実行されるスマートコントラクトは、いつ誰が作り、誰が何を実行したかがずっと残り続ける、全世界で共通のステートを持つコード実行環境です。これは、アートしてのコードを記述・実行する環境として理想的です。私はこの環境を使って、フィードバックを受けながら変化していくコードをつくる方法を模索しました。この作品は、そのための第一歩として、自らを複製できるミニマムのコードを作成したものです。",
    "codeIncubator": "コードを育む母体としてのアカウント",
    "codeIncubatorDescription": "Flow では、アカウントごとにスマートコントラクトをデプロイできるストレージ領域が用意されています。今回作成したミニマムの実装では、アカウントを関数の引数に取り、そのアカウントに対してコードの中で新しくコントラクトをデプロイする関数をひとつ作りました。デプロイするコントラクトのコードは、実行しているコントラクト自らのコードを内部的に参照します。この様子は、あたかも母体に新しい命を授けているかのようにみえます。",
    "codeDescription": "コードの解説",
    "codeDescriptionDescription": "`SelfReplication` コントラクトは、`name` というコントラクト変数を持ち、これはコントラクトのデプロイ時に決まった文字列に初期化されます。`replicate` 関数はアカウントを引数に取り、そのアカウントの中にコントラクトを追加します。このとき、引数に渡すコードは自身のコードをそのまま受け渡します。自身のコードは、このコントラクトがデプロイされているアカウント（`self.account`）から、コントラクトの名前を指定して取得します。",
    "links": "リンク",
    "flowscanDescription1": "一番最初にデプロイされたコントラクト",
    "flowscanDescription2": "コントラクトを複製するためのトランザクション",
    "githubDescription": "コントラクトやトランザクションのソースコード"
  },
  "mutation": {
    "workInfo": "Cadence スマート･コントラクト, 2022",
    "abstract": "「Mutation（突然変異）」は、「Self-Replication」をさらに発展させたもので、複製することに加えて自身のコードをランダムに変更することができるスマートコントラクトです。",
    "meaning": "連続するコード変更の履歴",
    "meaningDescription": "ブロックチェーンおよびスマートコントラクトを使えば、コードの記述と実行を同じ場所で行うことができます。従来、これを実現するためには、個別に専用の環境を構築しなければなりませんでしたが、スマートコントラクトはその困難を乗り越えることを可能にします。この作品では、そのシンプルな例を示しています。スマートコントラクトには、`mutate()` という関数があり、これを呼び出すと自身のコードに変更が加えられます。この例では、コントラクトの名前 `Mutation` がランダムに一文字だけ `X` という文字に変わります。例えば、`MXtation` のように。その後、`replicate()` という関数を呼び出すことで、変更が加えられたコードが複製されます。コードを変更した履歴は、すべて永続的に残り続けます。",
    "codeDescription": "コードの解説",
    "codeDescriptionDescription": "`Mutation` コントラクトは、`mutate()` 関数と `replicate()` 関数を持っています。`mutate()` 関数が呼び出させると、コントラクトの名前を 1 文字書き換える位置を、現在のブロック ID を使って擬似ランダムに決定します（13 行目）。そして、変更した名前の文字列をつくって、コントラクト変数に格納します（14〜24 行目）。26〜29 行目では、自身のコントラクトのコードのうち名前が含まれる箇所を、変更した名前に差し替えて、コントラクト変数に格納しています。その後、`replication()` 関数が呼び出されると、格納済みの名前とコードを、渡させたアカウントの中にデプロイします（33 行目）。",
    "links": "リンク",
    "flowscanDescription1": "一番最初にデプロイされたコントラクト",
    "flowscanDescription2": "コントラクトに突然変異を加えるトランザクション",
    "githubDescription": "コントラクトやトランザクションのソースコード"
  },
  "semi": {
    "workInfo": "NFT コントラクト, Solidity, 2022",
    "demoNote": "※セミをクリックすると音が出ます",
    "abstract": "Semi（蝉 / セミ / Cicada）は、様々な要素を取り入れた実験的な NFT スマートコントラクトです。互いに影響を及ぼし合うデジタルアイテム、音が鳴るインタラクティブなコンテンツ、更新可能でコンポーザブルな設計、所有者が権限を持つより良いメタデータを実現しています。",
    "affectEachOthers": "互いに影響を及ぼし合う",
    "affectEachOthersDescription": "この NFT は誰でも mint できます。NFT が mint されると、ランダムな位置（x 座標, y 座標）に、5 種類のうちランダムに決まった種類のセミが 1 匹 描画されます。複数のセミを所有すると、その数だけセミが描画されます。それぞれのセミの画像は、同じアドレスに所有されている他のセミすべてに影響を受けて生成されます。セミを他のアドレスに送付すると、同じアドレスの他のすべてのセミの画像からセミはいなくなります。このような性質は、デジタルアイテムに実感を持たせるために重要な要素になるでしょう。",
    "interactive": "音が鳴るインタラクティブなコンテンツ",
    "interactiveDescription": "セミをクリックすると、種類に応じた鳴き声が再生されます。セミの数と種類が増えれば、より多くの音の組み合わせを楽しむことができます。このロジックは HTML と JavaScript で実現されており、コードはオンチェーンで生成されています。",
    "composability": "更新可能でコンポーザブルな設計",
    "composabilityDescription": "この NFT のコントラクトは、画像を描画するレンダラーを変更できるよう設計されています。これにより、描画に関するメンテナンスを可能にすることに加え、コンテンツを段階的に変化させることができます。レンダラーでは、ロジックとアセットが完全に分離されています。ロジックはすべてオンチェーンで生成されており、アセットはオフチェーンの画像と音楽を参照しています。すなわちこれは、フル・オンチェーンならぬ、セミ・オンチェーンの NFT なのです。",
    "betterMetadata": "所有者が権限を持つより良いメタデータ",
    "betterMetadataDescription": "我々は NFT によっていったい何を所有できているのでしょうか？そのひとつの答えは、何かしらのメタデータとの紐付けです。紐付けられているメタデータは、所有者が感じるデジタルなモノのアイデンティティだと言っても良いでしょう。その紐付けは、別の誰かによって勝手に変更されてよいものではありません。この NFT では、コントラクトの作成者が NFT のレンダラーを更新していくことができますが、その紐付けを所有者が選択できるようにすることで、より良いメタデータのあり方を提示します。所有者は、過去に登録されたレンダラーのうち望むものを自由に選択できます。",
    "links": "リンク",
    "etherscanDescription": "もしあなたがこの NFT に価値を見出し、作品に参加することを望むなら、Etherscan にて mint() 関数を実行することで NFT を mint できます。引数にはあなたの ETH アドレスを入力してください。必要なのは Gas 代だけです。",
    "githubDescription": "もしあなたがこの NFT の詳細の仕組みを知りたいなら、GitHub でスマートコントラクトのソースコードや開発環境をみることができます。",
    "openseaDescription": "もしあなたがこの NFT の画像やメタデータをみたいなら、または、NFT を売買したいなら、OpenSea を使うことができます。"
  }
}
